// Code generated by go-swagger; DO NOT EDIT.

package link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "shortener-api/models"
)

// GetLinksHandlerFunc turns a function with the right signature into a get links handler
type GetLinksHandlerFunc func(GetLinksParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLinksHandlerFunc) Handle(params GetLinksParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetLinksHandler interface for that can handle valid get links params
type GetLinksHandler interface {
	Handle(GetLinksParams, interface{}) middleware.Responder
}

// NewGetLinks creates a new http.Handler for the get links operation
func NewGetLinks(ctx *middleware.Context, handler GetLinksHandler) *GetLinks {
	return &GetLinks{Context: ctx, Handler: handler}
}

/*GetLinks swagger:route GET /users/me/shorten_urls Link getLinks

Get all short links for this user

*/
type GetLinks struct {
	Context *middleware.Context
	Handler GetLinksHandler
}

func (o *GetLinks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLinksParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLinksOKBody get links o k body
// swagger:model GetLinksOKBody
type GetLinksOKBody struct {

	// Array of links
	// Required: true
	Links []*models.Link `json:"links"`
}

// Validate validates this get links o k body
func (o *GetLinksOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLinksOKBody) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("getLinksOK"+"."+"links", "body", o.Links); err != nil {
		return err
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getLinksOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetLinksOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLinksOKBody) UnmarshalBinary(b []byte) error {
	var res GetLinksOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
