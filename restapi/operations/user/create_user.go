// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// CreateUserHandlerFunc turns a function with the right signature into a create user handler
type CreateUserHandlerFunc func(CreateUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserHandlerFunc) Handle(params CreateUserParams) middleware.Responder {
	return fn(params)
}

// CreateUserHandler interface for that can handle valid create user params
type CreateUserHandler interface {
	Handle(CreateUserParams) middleware.Responder
}

// NewCreateUser creates a new http.Handler for the create user operation
func NewCreateUser(ctx *middleware.Context, handler CreateUserHandler) *CreateUser {
	return &CreateUser{Context: ctx, Handler: handler}
}

/*CreateUser swagger:route POST /users User createUser

User registrations

*/
type CreateUser struct {
	Context *middleware.Context
	Handler CreateUserHandler
}

func (o *CreateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateUserBody create user body
// swagger:model CreateUserBody
type CreateUserBody struct {

	// email
	// Required: true
	// Max Length: 100
	Email *string `json:"email"`

	// language
	// Max Length: 5
	// Min Length: 2
	Language string `json:"language,omitempty"`

	// password
	// Required: true
	// Max Length: 60
	// Min Length: 5
	Password *string `json:"password"`

	// timezone
	// Max Length: 40
	Timezone string `json:"timezone,omitempty"`

	// username
	// Required: true
	// Max Length: 60
	// Min Length: 5
	Username *string `json:"username"`
}

// Validate validates this create user body
func (o *CreateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"email", "body", string(*o.Email), 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserBody) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(o.Language) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"language", "body", string(o.Language), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"language", "body", string(o.Language), 5); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"password", "body", string(*o.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"password", "body", string(*o.Password), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserBody) validateTimezone(formats strfmt.Registry) error {

	if swag.IsZero(o.Timezone) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"timezone", "body", string(o.Timezone), 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"username", "body", string(*o.Username), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"username", "body", string(*o.Username), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserBody) UnmarshalBinary(b []byte) error {
	var res CreateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
