// Code generated by go-swagger; DO NOT EDIT.

package statistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetReferersHandlerFunc turns a function with the right signature into a get referers handler
type GetReferersHandlerFunc func(GetReferersParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReferersHandlerFunc) Handle(params GetReferersParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetReferersHandler interface for that can handle valid get referers params
type GetReferersHandler interface {
	Handle(GetReferersParams, interface{}) middleware.Responder
}

// NewGetReferers creates a new http.Handler for the get referers operation
func NewGetReferers(ctx *middleware.Context, handler GetReferersHandler) *GetReferers {
	return &GetReferers{Context: ctx, Handler: handler}
}

/*GetReferers swagger:route GET /users/me/shorten_urls/{hash}/referers Statistic getReferers

Get top from 20 referring sites

*/
type GetReferers struct {
	Context *middleware.Context
	Handler GetReferersHandler
}

func (o *GetReferers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReferersParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetReferersOKBody get referers o k body
// swagger:model GetReferersOKBody
type GetReferersOKBody struct {

	// top
	// Required: true
	Top []*TopItems0 `json:"top"`
}

// Validate validates this get referers o k body
func (o *GetReferersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReferersOKBody) validateTop(formats strfmt.Registry) error {

	if err := validate.Required("getReferersOK"+"."+"top", "body", o.Top); err != nil {
		return err
	}

	for i := 0; i < len(o.Top); i++ {
		if swag.IsZero(o.Top[i]) { // not required
			continue
		}

		if o.Top[i] != nil {
			if err := o.Top[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getReferersOK" + "." + "top" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReferersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReferersOKBody) UnmarshalBinary(b []byte) error {
	var res GetReferersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// TopItems0 top items0
// swagger:model TopItems0
type TopItems0 struct {

	// count
	// Required: true
	// Minimum: 1
	Count *int64 `json:"count"`

	// id
	// Required: true
	// Minimum: 1
	ID *int64 `json:"id"`

	// referer
	// Required: true
	Referer *string `json:"referer"`
}

// Validate validates this top items0
func (o *TopItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TopItems0) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", o.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("count", "body", int64(*o.Count), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *TopItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*o.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *TopItems0) validateReferer(formats strfmt.Registry) error {

	if err := validate.Required("referer", "body", o.Referer); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TopItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TopItems0) UnmarshalBinary(b []byte) error {
	var res TopItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
