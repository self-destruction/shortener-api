// Code generated by go-swagger; DO NOT EDIT.

package statistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "shortener-api/models"
)

// GetLinkInfoHandlerFunc turns a function with the right signature into a get link info handler
type GetLinkInfoHandlerFunc func(GetLinkInfoParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLinkInfoHandlerFunc) Handle(params GetLinkInfoParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetLinkInfoHandler interface for that can handle valid get link info params
type GetLinkInfoHandler interface {
	Handle(GetLinkInfoParams, interface{}) middleware.Responder
}

// NewGetLinkInfo creates a new http.Handler for the get link info operation
func NewGetLinkInfo(ctx *middleware.Context, handler GetLinkInfoHandler) *GetLinkInfo {
	return &GetLinkInfo{Context: ctx, Handler: handler}
}

/*GetLinkInfo swagger:route GET /users/me/shorten_urls/{hash} Statistic getLinkInfo

Get information about a specific short user link

*/
type GetLinkInfo struct {
	Context *middleware.Context
	Handler GetLinkInfoHandler
}

func (o *GetLinkInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLinkInfoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLinkInfoOKBody get link info o k body
// swagger:model GetLinkInfoOKBody
type GetLinkInfoOKBody struct {

	// link
	// Required: true
	Link *models.Link `json:"link"`

	// Array of transitions
	// Required: true
	Transitions []*TransitionsItems0 `json:"transitions"`
}

// Validate validates this get link info o k body
func (o *GetLinkInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLinkInfoOKBody) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("getLinkInfoOK"+"."+"link", "body", o.Link); err != nil {
		return err
	}

	if o.Link != nil {
		if err := o.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getLinkInfoOK" + "." + "link")
			}
			return err
		}
	}

	return nil
}

func (o *GetLinkInfoOKBody) validateTransitions(formats strfmt.Registry) error {

	if err := validate.Required("getLinkInfoOK"+"."+"transitions", "body", o.Transitions); err != nil {
		return err
	}

	for i := 0; i < len(o.Transitions); i++ {
		if swag.IsZero(o.Transitions[i]) { // not required
			continue
		}

		if o.Transitions[i] != nil {
			if err := o.Transitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getLinkInfoOK" + "." + "transitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetLinkInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLinkInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetLinkInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// TransitionsItems0 transitions items0
// swagger:model TransitionsItems0
type TransitionsItems0 struct {

	// Count of transitions for date
	// Required: true
	// Minimum: 0
	Count *int64 `json:"count"`

	// Date of transition
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`
}

// Validate validates this transitions items0
func (o *TransitionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TransitionsItems0) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", o.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("count", "body", int64(*o.Count), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *TransitionsItems0) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", o.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TransitionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TransitionsItems0) UnmarshalBinary(b []byte) error {
	var res TransitionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
