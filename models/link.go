// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Link link
// swagger:model Link
type Link struct {

	// Clicks this link
	// Minimum: 0
	Clicks *int64 `json:"clicks,omitempty"`

	// date created
	DateCreated string `json:"dateCreated,omitempty"`

	// Full link
	// Required: true
	FullURL *string `json:"fullUrl"`

	// id
	// Required: true
	// Minimum: 1
	ID *int64 `json:"id"`

	// Short url
	// Required: true
	ShortURL *string `json:"shortUrl"`

	// user Id
	// Minimum: 1
	UserID int64 `json:"userId,omitempty"`
}

// Validate validates this link
func (m *Link) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClicks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Link) validateClicks(formats strfmt.Registry) error {

	if swag.IsZero(m.Clicks) { // not required
		return nil
	}

	if err := validate.MinimumInt("clicks", "body", int64(*m.Clicks), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Link) validateFullURL(formats strfmt.Registry) error {

	if err := validate.Required("fullUrl", "body", m.FullURL); err != nil {
		return err
	}

	return nil
}

func (m *Link) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Link) validateShortURL(formats strfmt.Registry) error {

	if err := validate.Required("shortUrl", "body", m.ShortURL); err != nil {
		return err
	}

	return nil
}

func (m *Link) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.MinimumInt("userId", "body", int64(m.UserID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Link) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Link) UnmarshalBinary(b []byte) error {
	var res Link
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
